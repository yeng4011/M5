#include <Arduino.h>
#include <ArduinoWebsockets.h>
#include <WiFi.h>
#include <M5StickCPlus.h> // 引入M5StickC Plus函式庫

const char* ssid = "A3007";
const char* password = "79161389";
const char* serverAddress = "192.168.0.32";
const uint16_t serverPort = 9000;

using namespace websockets;

WebsocketsClient webSocket;

void setup() {
  Serial.begin(115200);

  // 連接WiFi網路
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // 連接WebSocket伺服器
  webSocket.onMessage(onMessageCallback);
  webSocket.onEvent(onEventsCallback);
  webSocket.connect(serverAddress, serverPort, "/");
  Serial.println("WebSocket connecting...");

  // 初始化M5StickC Plus的IMU
  M5.IMU.Init();
}

void loop() {
  webSocket.poll();

  static unsigned long previousMillis = 0;
  const unsigned long interval = 1000; // 每隔 1 秒傳送一次加速度數據

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // 定期傳送加速度數據
    float accX, accY, accZ;
    getAccelData(&accX, &accY, &accZ);
    String message = String(accX) + "," + String(accY) + "," + String(accZ);
    webSocket.send(message);
  }
}

void getAccelData(float* accX, float* accY, float* accZ) {
  // Initialize IMU
  M5.IMU.Init();

  // 獲取加速度數據
  int16_t rawAccX, rawAccY, rawAccZ;
  M5.IMU.getAccelAdc(&rawAccX, &rawAccY, &rawAccZ);

  // 轉換成浮點數
  *accX = static_cast<float>(rawAccX) / 16384.0;
  *accY = static_cast<float>(rawAccY) / 16384.0;
  *accZ = static_cast<float>(rawAccZ) / 16384.0;
}

void onMessageCallback(WebsocketsMessage message) {
  Serial.print("[WebSocket] Message from server: ");
  Serial.println(message.data());
}

void onEventsCallback(WebsocketsEvent event, String data) {
  if (event == WebsocketsEvent::ConnectionOpened) {
    Serial.println("[WebSocket] Connected to server");
  } else if (event == WebsocketsEvent::ConnectionClosed) {
    Serial.println("[WebSocket] Disconnected from server");
  } else if (event == WebsocketsEvent::GotPing) {
    Serial.println("[WebSocket] Got a Ping!");
  } else if (event == WebsocketsEvent::GotPong) {
    Serial.println("[WebSocket] Got a Pong!");
  } else {
    Serial.println("[WebSocket] Unknown event");
  }
} 